// Code generated by generator, DO NOT EDIT.
package pb

import (
	"bytes"
	gomultierror "github.com/hashicorp/go-multierror"
	"strconv"
	"strings"
)

func (re *VacancyEntity) BuildInsertQuery() (string, error) {
	var (
		resErr    error
		resValues = make([]string, 0, 39)
	)
	sb := bytes.NewBufferString("INSERT INTO vacancies(id, name, active, created_at, updated_at, requirement, salary, skills, city, city_level, brand, website_url, logo, industry_groups, company_id, specialization, metro, salary_before_tax, salary_curr, job_responsibility, job_requirement, work_condition, city_visibility, vacancy_language, business_tripp, self_employed, ip_employed, payment_period, salary_from, salary_to, default_work_type, work_type, experience, min_customer_languages, driver_license, driver_exp, have_car, restrictions, list_respond_button) VALUES(")
	resValues = append(resValues, strconv.FormatInt(int64(re.Id), 10))
	resValues = append(resValues, func() string {
		sb := bytes.NewBufferString("'")
		if len(re.Name) == 0 {
			_, err := sb.WriteString(" '")
			if err != nil {
				resErr = gomultierror.Append(resErr, err)
			}
			return sb.String()
		}
		_, err := sb.WriteString(re.Name)
		_, err = sb.WriteString("'")
		if err != nil {
			resErr = gomultierror.Append(resErr, err)
		}
		return sb.String()
	}())
	resValues = append(resValues, func() string {
		if re.Active == true {
			return "1"
		}
		return "0"
	}())
	resValues = append(resValues, func() string {
		sb := bytes.NewBufferString("'")
		if len(re.Requirement) == 0 {
			_, err := sb.WriteString(" '")
			if err != nil {
				resErr = gomultierror.Append(resErr, err)
			}
			return sb.String()
		}
		_, err := sb.WriteString(re.Requirement)
		_, err = sb.WriteString("'")
		if err != nil {
			resErr = gomultierror.Append(resErr, err)
		}
		return sb.String()
	}())
	resValues = append(resValues, strconv.FormatInt(int64(re.Salary), 10))
	resValues = append(resValues, func() string {
		sb := bytes.NewBufferString("'")
		if len(re.Skills) == 0 {
			_, err := sb.WriteString(" '")
			if err != nil {
				resErr = gomultierror.Append(resErr, err)
			}
			return sb.String()
		}
		_, err := sb.WriteString(re.Skills)
		_, err = sb.WriteString("'")
		if err != nil {
			resErr = gomultierror.Append(resErr, err)
		}
		return sb.String()
	}())
	resValues = append(resValues, strconv.FormatInt(int64(re.City), 10))
	resValues = append(resValues, strconv.FormatInt(int64(re.CityLevel), 10))
	resValues = append(resValues, func() string {
		sb := bytes.NewBufferString("'")
		if len(re.Brand) == 0 {
			_, err := sb.WriteString(" '")
			if err != nil {
				resErr = gomultierror.Append(resErr, err)
			}
			return sb.String()
		}
		_, err := sb.WriteString(re.Brand)
		_, err = sb.WriteString("'")
		if err != nil {
			resErr = gomultierror.Append(resErr, err)
		}
		return sb.String()
	}())
	resValues = append(resValues, func() string {
		sb := bytes.NewBufferString("'")
		if len(re.WebsiteUrl) == 0 {
			_, err := sb.WriteString(" '")
			if err != nil {
				resErr = gomultierror.Append(resErr, err)
			}
			return sb.String()
		}
		_, err := sb.WriteString(re.WebsiteUrl)
		_, err = sb.WriteString("'")
		if err != nil {
			resErr = gomultierror.Append(resErr, err)
		}
		return sb.String()
	}())
	resValues = append(resValues, func() string {
		sb := bytes.NewBufferString("'")
		if len(re.Logo) == 0 {
			_, err := sb.WriteString(" '")
			if err != nil {
				resErr = gomultierror.Append(resErr, err)
			}
			return sb.String()
		}
		_, err := sb.WriteString(re.Logo)
		_, err = sb.WriteString("'")
		if err != nil {
			resErr = gomultierror.Append(resErr, err)
		}
		return sb.String()
	}())
	resValues = append(resValues, func() string {
		sb := bytes.NewBufferString("(")
		if len(re.IndustryGroups) == 0 {
			_, err := sb.WriteString("0)")
			if err != nil {
				resErr = gomultierror.Append(resErr, err)
			}
			return sb.String()
		}
		for i, v := range re.IndustryGroups {
			if i == len(re.IndustryGroups)-1 {
				_, err := sb.WriteString(strconv.FormatInt(int64(v), 10))
				_, err = sb.WriteString(")")
				if err != nil {
					resErr = gomultierror.Append(resErr, err)
				}
				break
			}
			_, err := sb.WriteString(strconv.FormatInt(int64(v), 10))
			_, err = sb.WriteString(",")
			if err != nil {
				resErr = gomultierror.Append(resErr, err)
			}
		}
		return sb.String()
	}())
	resValues = append(resValues, strconv.FormatInt(int64(re.CompanyId), 10))
	resValues = append(resValues, func() string {
		sb := bytes.NewBufferString("(")
		if len(re.Specialization) == 0 {
			_, err := sb.WriteString("0)")
			if err != nil {
				resErr = gomultierror.Append(resErr, err)
			}
			return sb.String()
		}
		for i, v := range re.Specialization {
			if i == len(re.Specialization)-1 {
				_, err := sb.WriteString(strconv.FormatInt(int64(v), 10))
				_, err = sb.WriteString(")")
				if err != nil {
					resErr = gomultierror.Append(resErr, err)
				}
				break
			}
			_, err := sb.WriteString(strconv.FormatInt(int64(v), 10))
			_, err = sb.WriteString(",")
			if err != nil {
				resErr = gomultierror.Append(resErr, err)
			}
		}
		return sb.String()
	}())
	resValues = append(resValues, func() string {
		sb := bytes.NewBufferString("(")
		if len(re.Metro) == 0 {
			_, err := sb.WriteString("0)")
			if err != nil {
				resErr = gomultierror.Append(resErr, err)
			}
			return sb.String()
		}
		for i, v := range re.Metro {
			if i == len(re.Metro)-1 {
				_, err := sb.WriteString(strconv.FormatInt(int64(v), 10))
				_, err = sb.WriteString(")")
				if err != nil {
					resErr = gomultierror.Append(resErr, err)
				}
				break
			}
			_, err := sb.WriteString(strconv.FormatInt(int64(v), 10))
			_, err = sb.WriteString(",")
			if err != nil {
				resErr = gomultierror.Append(resErr, err)
			}
		}
		return sb.String()
	}())
	resValues = append(resValues, func() string {
		if re.SalaryBeforeTax == true {
			return "1"
		}
		return "0"
	}())
	resValues = append(resValues, strconv.FormatInt(int64(re.SalaryCurr), 10))
	resValues = append(resValues, func() string {
		sb := bytes.NewBufferString("'")
		if len(re.JobResponsibility) == 0 {
			_, err := sb.WriteString(" '")
			if err != nil {
				resErr = gomultierror.Append(resErr, err)
			}
			return sb.String()
		}
		_, err := sb.WriteString(re.JobResponsibility)
		_, err = sb.WriteString("'")
		if err != nil {
			resErr = gomultierror.Append(resErr, err)
		}
		return sb.String()
	}())
	resValues = append(resValues, func() string {
		sb := bytes.NewBufferString("'")
		if len(re.JobRequirement) == 0 {
			_, err := sb.WriteString(" '")
			if err != nil {
				resErr = gomultierror.Append(resErr, err)
			}
			return sb.String()
		}
		_, err := sb.WriteString(re.JobRequirement)
		_, err = sb.WriteString("'")
		if err != nil {
			resErr = gomultierror.Append(resErr, err)
		}
		return sb.String()
	}())
	resValues = append(resValues, func() string {
		sb := bytes.NewBufferString("'")
		if len(re.WorkCondition) == 0 {
			_, err := sb.WriteString(" '")
			if err != nil {
				resErr = gomultierror.Append(resErr, err)
			}
			return sb.String()
		}
		_, err := sb.WriteString(re.WorkCondition)
		_, err = sb.WriteString("'")
		if err != nil {
			resErr = gomultierror.Append(resErr, err)
		}
		return sb.String()
	}())
	resValues = append(resValues, func() string {
		sb := bytes.NewBufferString("(")
		if len(re.CityVisibility) == 0 {
			_, err := sb.WriteString("0)")
			if err != nil {
				resErr = gomultierror.Append(resErr, err)
			}
			return sb.String()
		}
		for i, v := range re.CityVisibility {
			if i == len(re.CityVisibility)-1 {
				_, err := sb.WriteString(strconv.FormatInt(int64(v), 10))
				_, err = sb.WriteString(")")
				if err != nil {
					resErr = gomultierror.Append(resErr, err)
				}
				break
			}
			_, err := sb.WriteString(strconv.FormatInt(int64(v), 10))
			_, err = sb.WriteString(",")
			if err != nil {
				resErr = gomultierror.Append(resErr, err)
			}
		}
		return sb.String()
	}())
	resValues = append(resValues, strconv.FormatInt(int64(re.VacancyLanguage), 10))
	resValues = append(resValues, strconv.FormatInt(int64(re.BusinessTrips), 10))
	resValues = append(resValues, func() string {
		if re.SelfEmployed == true {
			return "1"
		}
		return "0"
	}())
	resValues = append(resValues, func() string {
		if re.IpEmployed == true {
			return "1"
		}
		return "0"
	}())
	resValues = append(resValues, strconv.FormatInt(int64(re.PaymentPeriod), 10))
	resValues = append(resValues, strconv.FormatInt(int64(re.SalaryFrom), 10))
	resValues = append(resValues, strconv.FormatInt(int64(re.SalaryTo), 10))
	resValues = append(resValues, strconv.FormatInt(int64(re.DefaultWorkType), 10))
	resValues = append(resValues, func() string {
		sb := bytes.NewBufferString("(")
		if len(re.WorkType) == 0 {
			_, err := sb.WriteString("0)")
			if err != nil {
				resErr = gomultierror.Append(resErr, err)
			}
			return sb.String()
		}
		for i, v := range re.WorkType {
			if i == len(re.WorkType)-1 {
				_, err := sb.WriteString(strconv.FormatInt(int64(v), 10))
				_, err = sb.WriteString(")")
				if err != nil {
					resErr = gomultierror.Append(resErr, err)
				}
				break
			}
			_, err := sb.WriteString(strconv.FormatInt(int64(v), 10))
			_, err = sb.WriteString(",")
			if err != nil {
				resErr = gomultierror.Append(resErr, err)
			}
		}
		return sb.String()
	}())
	resValues = append(resValues, strconv.FormatInt(int64(re.Experience), 10))
	resValues = append(resValues, func() string {
		sb := bytes.NewBufferString("(")
		if len(re.MinCustomerLanguages) == 0 {
			_, err := sb.WriteString("0)")
			if err != nil {
				resErr = gomultierror.Append(resErr, err)
			}
			return sb.String()
		}
		for i, v := range re.MinCustomerLanguages {
			if i == len(re.MinCustomerLanguages)-1 {
				_, err := sb.WriteString(strconv.FormatInt(int64(v), 10))
				_, err = sb.WriteString(")")
				if err != nil {
					resErr = gomultierror.Append(resErr, err)
				}
				break
			}
			_, err := sb.WriteString(strconv.FormatInt(int64(v), 10))
			_, err = sb.WriteString(",")
			if err != nil {
				resErr = gomultierror.Append(resErr, err)
			}
		}
		return sb.String()
	}())
	resValues = append(resValues, func() string {
		sb := bytes.NewBufferString("(")
		if len(re.DriverLicense) == 0 {
			_, err := sb.WriteString("0)")
			if err != nil {
				resErr = gomultierror.Append(resErr, err)
			}
			return sb.String()
		}
		for i, v := range re.DriverLicense {
			if i == len(re.DriverLicense)-1 {
				_, err := sb.WriteString(strconv.FormatInt(int64(v), 10))
				_, err = sb.WriteString(")")
				if err != nil {
					resErr = gomultierror.Append(resErr, err)
				}
				break
			}
			_, err := sb.WriteString(strconv.FormatInt(int64(v), 10))
			_, err = sb.WriteString(",")
			if err != nil {
				resErr = gomultierror.Append(resErr, err)
			}
		}
		return sb.String()
	}())
	resValues = append(resValues, strconv.FormatInt(int64(re.DriverExp), 10))
	resValues = append(resValues, func() string {
		if re.HaveCar == true {
			return "1"
		}
		return "0"
	}())
	resValues = append(resValues, func() string {
		sb := bytes.NewBufferString("(")
		if len(re.Restrictions) == 0 {
			_, err := sb.WriteString("0)")
			if err != nil {
				resErr = gomultierror.Append(resErr, err)
			}
			return sb.String()
		}
		for i, v := range re.Restrictions {
			if i == len(re.Restrictions)-1 {
				_, err := sb.WriteString(strconv.FormatInt(int64(v), 10))
				_, err = sb.WriteString(")")
				if err != nil {
					resErr = gomultierror.Append(resErr, err)
				}
				break
			}
			_, err := sb.WriteString(strconv.FormatInt(int64(v), 10))
			_, err = sb.WriteString(",")
			if err != nil {
				resErr = gomultierror.Append(resErr, err)
			}
		}
		return sb.String()
	}())
	resValues = append(resValues, func() string {
		if re.ListRespondButton == true {
			return "1"
		}
		return "0"
	}())
	_, err := sb.WriteString(strings.Join(resValues, ", "))
	_, err = sb.WriteString(");")
	if err != nil {
		resErr = gomultierror.Append(resErr, err)
	}
	if resErr != nil {
		return "", resErr
	}
	return sb.String(), nil
}
func (re *VacancyEntity) BuildUpsertQuery() (string, error) {
	var (
		resErr    error
		resValues = make([]string, 0, 39)
	)
	sb := bytes.NewBufferString("REPLACE INTO vacancies(id, name, active, created_at, updated_at, requirement, salary, skills, city, city_level, brand, website_url, logo, industry_groups, company_id, specialization, metro, salary_before_tax, salary_curr, job_responsibility, job_requirement, work_condition, city_visibility, vacancy_language, business_tripp, self_employed, ip_employed, payment_period, salary_from, salary_to, default_work_type, work_type, experience, min_customer_languages, driver_license, driver_exp, have_car, restrictions, list_respond_button) VALUES(")
	resValues = append(resValues, strconv.FormatInt(int64(re.Id), 10))
	resValues = append(resValues, func() string {
		sb := bytes.NewBufferString("'")
		if len(re.Name) == 0 {
			_, err := sb.WriteString(" '")
			if err != nil {
				resErr = gomultierror.Append(resErr, err)
			}
			return sb.String()
		}
		_, err := sb.WriteString(re.Name)
		_, err = sb.WriteString("'")
		if err != nil {
			resErr = gomultierror.Append(resErr, err)
		}
		return sb.String()
	}())
	resValues = append(resValues, func() string {
		if re.Active == true {
			return "1"
		}
		return "0"
	}())
	resValues = append(resValues, func() string {
		sb := bytes.NewBufferString("'")
		if len(re.Requirement) == 0 {
			_, err := sb.WriteString(" '")
			if err != nil {
				resErr = gomultierror.Append(resErr, err)
			}
			return sb.String()
		}
		_, err := sb.WriteString(re.Requirement)
		_, err = sb.WriteString("'")
		if err != nil {
			resErr = gomultierror.Append(resErr, err)
		}
		return sb.String()
	}())
	resValues = append(resValues, strconv.FormatInt(int64(re.Salary), 10))
	resValues = append(resValues, func() string {
		sb := bytes.NewBufferString("'")
		if len(re.Skills) == 0 {
			_, err := sb.WriteString(" '")
			if err != nil {
				resErr = gomultierror.Append(resErr, err)
			}
			return sb.String()
		}
		_, err := sb.WriteString(re.Skills)
		_, err = sb.WriteString("'")
		if err != nil {
			resErr = gomultierror.Append(resErr, err)
		}
		return sb.String()
	}())
	resValues = append(resValues, strconv.FormatInt(int64(re.City), 10))
	resValues = append(resValues, strconv.FormatInt(int64(re.CityLevel), 10))
	resValues = append(resValues, func() string {
		sb := bytes.NewBufferString("'")
		if len(re.Brand) == 0 {
			_, err := sb.WriteString(" '")
			if err != nil {
				resErr = gomultierror.Append(resErr, err)
			}
			return sb.String()
		}
		_, err := sb.WriteString(re.Brand)
		_, err = sb.WriteString("'")
		if err != nil {
			resErr = gomultierror.Append(resErr, err)
		}
		return sb.String()
	}())
	resValues = append(resValues, func() string {
		sb := bytes.NewBufferString("'")
		if len(re.WebsiteUrl) == 0 {
			_, err := sb.WriteString(" '")
			if err != nil {
				resErr = gomultierror.Append(resErr, err)
			}
			return sb.String()
		}
		_, err := sb.WriteString(re.WebsiteUrl)
		_, err = sb.WriteString("'")
		if err != nil {
			resErr = gomultierror.Append(resErr, err)
		}
		return sb.String()
	}())
	resValues = append(resValues, func() string {
		sb := bytes.NewBufferString("'")
		if len(re.Logo) == 0 {
			_, err := sb.WriteString(" '")
			if err != nil {
				resErr = gomultierror.Append(resErr, err)
			}
			return sb.String()
		}
		_, err := sb.WriteString(re.Logo)
		_, err = sb.WriteString("'")
		if err != nil {
			resErr = gomultierror.Append(resErr, err)
		}
		return sb.String()
	}())
	resValues = append(resValues, func() string {
		sb := bytes.NewBufferString("(")
		if len(re.IndustryGroups) == 0 {
			_, err := sb.WriteString("0)")
			if err != nil {
				resErr = gomultierror.Append(resErr, err)
			}
			return sb.String()
		}
		for i, v := range re.IndustryGroups {
			if i == len(re.IndustryGroups)-1 {
				_, err := sb.WriteString(strconv.FormatInt(int64(v), 10))
				_, err = sb.WriteString(")")
				if err != nil {
					resErr = gomultierror.Append(resErr, err)
				}
				break
			}
			_, err := sb.WriteString(strconv.FormatInt(int64(v), 10))
			_, err = sb.WriteString(",")
			if err != nil {
				resErr = gomultierror.Append(resErr, err)
			}
		}
		return sb.String()
	}())
	resValues = append(resValues, strconv.FormatInt(int64(re.CompanyId), 10))
	resValues = append(resValues, func() string {
		sb := bytes.NewBufferString("(")
		if len(re.Specialization) == 0 {
			_, err := sb.WriteString("0)")
			if err != nil {
				resErr = gomultierror.Append(resErr, err)
			}
			return sb.String()
		}
		for i, v := range re.Specialization {
			if i == len(re.Specialization)-1 {
				_, err := sb.WriteString(strconv.FormatInt(int64(v), 10))
				_, err = sb.WriteString(")")
				if err != nil {
					resErr = gomultierror.Append(resErr, err)
				}
				break
			}
			_, err := sb.WriteString(strconv.FormatInt(int64(v), 10))
			_, err = sb.WriteString(",")
			if err != nil {
				resErr = gomultierror.Append(resErr, err)
			}
		}
		return sb.String()
	}())
	resValues = append(resValues, func() string {
		sb := bytes.NewBufferString("(")
		if len(re.Metro) == 0 {
			_, err := sb.WriteString("0)")
			if err != nil {
				resErr = gomultierror.Append(resErr, err)
			}
			return sb.String()
		}
		for i, v := range re.Metro {
			if i == len(re.Metro)-1 {
				_, err := sb.WriteString(strconv.FormatInt(int64(v), 10))
				_, err = sb.WriteString(")")
				if err != nil {
					resErr = gomultierror.Append(resErr, err)
				}
				break
			}
			_, err := sb.WriteString(strconv.FormatInt(int64(v), 10))
			_, err = sb.WriteString(",")
			if err != nil {
				resErr = gomultierror.Append(resErr, err)
			}
		}
		return sb.String()
	}())
	resValues = append(resValues, func() string {
		if re.SalaryBeforeTax == true {
			return "1"
		}
		return "0"
	}())
	resValues = append(resValues, strconv.FormatInt(int64(re.SalaryCurr), 10))
	resValues = append(resValues, func() string {
		sb := bytes.NewBufferString("'")
		if len(re.JobResponsibility) == 0 {
			_, err := sb.WriteString(" '")
			if err != nil {
				resErr = gomultierror.Append(resErr, err)
			}
			return sb.String()
		}
		_, err := sb.WriteString(re.JobResponsibility)
		_, err = sb.WriteString("'")
		if err != nil {
			resErr = gomultierror.Append(resErr, err)
		}
		return sb.String()
	}())
	resValues = append(resValues, func() string {
		sb := bytes.NewBufferString("'")
		if len(re.JobRequirement) == 0 {
			_, err := sb.WriteString(" '")
			if err != nil {
				resErr = gomultierror.Append(resErr, err)
			}
			return sb.String()
		}
		_, err := sb.WriteString(re.JobRequirement)
		_, err = sb.WriteString("'")
		if err != nil {
			resErr = gomultierror.Append(resErr, err)
		}
		return sb.String()
	}())
	resValues = append(resValues, func() string {
		sb := bytes.NewBufferString("'")
		if len(re.WorkCondition) == 0 {
			_, err := sb.WriteString(" '")
			if err != nil {
				resErr = gomultierror.Append(resErr, err)
			}
			return sb.String()
		}
		_, err := sb.WriteString(re.WorkCondition)
		_, err = sb.WriteString("'")
		if err != nil {
			resErr = gomultierror.Append(resErr, err)
		}
		return sb.String()
	}())
	resValues = append(resValues, func() string {
		sb := bytes.NewBufferString("(")
		if len(re.CityVisibility) == 0 {
			_, err := sb.WriteString("0)")
			if err != nil {
				resErr = gomultierror.Append(resErr, err)
			}
			return sb.String()
		}
		for i, v := range re.CityVisibility {
			if i == len(re.CityVisibility)-1 {
				_, err := sb.WriteString(strconv.FormatInt(int64(v), 10))
				_, err = sb.WriteString(")")
				if err != nil {
					resErr = gomultierror.Append(resErr, err)
				}
				break
			}
			_, err := sb.WriteString(strconv.FormatInt(int64(v), 10))
			_, err = sb.WriteString(",")
			if err != nil {
				resErr = gomultierror.Append(resErr, err)
			}
		}
		return sb.String()
	}())
	resValues = append(resValues, strconv.FormatInt(int64(re.VacancyLanguage), 10))
	resValues = append(resValues, strconv.FormatInt(int64(re.BusinessTrips), 10))
	resValues = append(resValues, func() string {
		if re.SelfEmployed == true {
			return "1"
		}
		return "0"
	}())
	resValues = append(resValues, func() string {
		if re.IpEmployed == true {
			return "1"
		}
		return "0"
	}())
	resValues = append(resValues, strconv.FormatInt(int64(re.PaymentPeriod), 10))
	resValues = append(resValues, strconv.FormatInt(int64(re.SalaryFrom), 10))
	resValues = append(resValues, strconv.FormatInt(int64(re.SalaryTo), 10))
	resValues = append(resValues, strconv.FormatInt(int64(re.DefaultWorkType), 10))
	resValues = append(resValues, func() string {
		sb := bytes.NewBufferString("(")
		if len(re.WorkType) == 0 {
			_, err := sb.WriteString("0)")
			if err != nil {
				resErr = gomultierror.Append(resErr, err)
			}
			return sb.String()
		}
		for i, v := range re.WorkType {
			if i == len(re.WorkType)-1 {
				_, err := sb.WriteString(strconv.FormatInt(int64(v), 10))
				_, err = sb.WriteString(")")
				if err != nil {
					resErr = gomultierror.Append(resErr, err)
				}
				break
			}
			_, err := sb.WriteString(strconv.FormatInt(int64(v), 10))
			_, err = sb.WriteString(",")
			if err != nil {
				resErr = gomultierror.Append(resErr, err)
			}
		}
		return sb.String()
	}())
	resValues = append(resValues, strconv.FormatInt(int64(re.Experience), 10))
	resValues = append(resValues, func() string {
		sb := bytes.NewBufferString("(")
		if len(re.MinCustomerLanguages) == 0 {
			_, err := sb.WriteString("0)")
			if err != nil {
				resErr = gomultierror.Append(resErr, err)
			}
			return sb.String()
		}
		for i, v := range re.MinCustomerLanguages {
			if i == len(re.MinCustomerLanguages)-1 {
				_, err := sb.WriteString(strconv.FormatInt(int64(v), 10))
				_, err = sb.WriteString(")")
				if err != nil {
					resErr = gomultierror.Append(resErr, err)
				}
				break
			}
			_, err := sb.WriteString(strconv.FormatInt(int64(v), 10))
			_, err = sb.WriteString(",")
			if err != nil {
				resErr = gomultierror.Append(resErr, err)
			}
		}
		return sb.String()
	}())
	resValues = append(resValues, func() string {
		sb := bytes.NewBufferString("(")
		if len(re.DriverLicense) == 0 {
			_, err := sb.WriteString("0)")
			if err != nil {
				resErr = gomultierror.Append(resErr, err)
			}
			return sb.String()
		}
		for i, v := range re.DriverLicense {
			if i == len(re.DriverLicense)-1 {
				_, err := sb.WriteString(strconv.FormatInt(int64(v), 10))
				_, err = sb.WriteString(")")
				if err != nil {
					resErr = gomultierror.Append(resErr, err)
				}
				break
			}
			_, err := sb.WriteString(strconv.FormatInt(int64(v), 10))
			_, err = sb.WriteString(",")
			if err != nil {
				resErr = gomultierror.Append(resErr, err)
			}
		}
		return sb.String()
	}())
	resValues = append(resValues, strconv.FormatInt(int64(re.DriverExp), 10))
	resValues = append(resValues, func() string {
		if re.HaveCar == true {
			return "1"
		}
		return "0"
	}())
	resValues = append(resValues, func() string {
		sb := bytes.NewBufferString("(")
		if len(re.Restrictions) == 0 {
			_, err := sb.WriteString("0)")
			if err != nil {
				resErr = gomultierror.Append(resErr, err)
			}
			return sb.String()
		}
		for i, v := range re.Restrictions {
			if i == len(re.Restrictions)-1 {
				_, err := sb.WriteString(strconv.FormatInt(int64(v), 10))
				_, err = sb.WriteString(")")
				if err != nil {
					resErr = gomultierror.Append(resErr, err)
				}
				break
			}
			_, err := sb.WriteString(strconv.FormatInt(int64(v), 10))
			_, err = sb.WriteString(",")
			if err != nil {
				resErr = gomultierror.Append(resErr, err)
			}
		}
		return sb.String()
	}())
	resValues = append(resValues, func() string {
		if re.ListRespondButton == true {
			return "1"
		}
		return "0"
	}())
	_, err := sb.WriteString(strings.Join(resValues, ", "))
	_, err = sb.WriteString(");")
	if err != nil {
		resErr = gomultierror.Append(resErr, err)
	}
	if resErr != nil {
		return "", resErr
	}
	return sb.String(), nil
}
