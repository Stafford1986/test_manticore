// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package entity

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson163c17a9DecodeGithubComStafford1986TestManticoreUsecaseEntity(in *jlexer.Lexer, out *VacancyEntity) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "requirement":
			out.Requirement = string(in.String())
		case "active":
			out.Active = int(in.Int())
		case "salary_from":
			out.SalaryFrom = int32(in.Int32())
		case "salary_to":
			out.SalaryTo = int32(in.Int32())
		case "created_at":
			out.CreatedAT = int32(in.Int32())
		case "updated_at":
			out.UpdatedAt = int32(in.Int32())
		case "skills":
			out.Skills = string(in.String())
		case "city":
			out.City = int32(in.Int32())
		case "city_level":
			out.CityLevel = int32(in.Int32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson163c17a9EncodeGithubComStafford1986TestManticoreUsecaseEntity(out *jwriter.Writer, in VacancyEntity) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.Id))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"requirement\":"
		out.RawString(prefix)
		out.String(string(in.Requirement))
	}
	{
		const prefix string = ",\"active\":"
		out.RawString(prefix)
		out.Int(int(in.Active))
	}
	{
		const prefix string = ",\"salary_from\":"
		out.RawString(prefix)
		out.Int32(int32(in.SalaryFrom))
	}
	{
		const prefix string = ",\"salary_to\":"
		out.RawString(prefix)
		out.Int32(int32(in.SalaryTo))
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Int32(int32(in.CreatedAT))
	}
	{
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.Int32(int32(in.UpdatedAt))
	}
	{
		const prefix string = ",\"skills\":"
		out.RawString(prefix)
		out.String(string(in.Skills))
	}
	{
		const prefix string = ",\"city\":"
		out.RawString(prefix)
		out.Int32(int32(in.City))
	}
	{
		const prefix string = ",\"city_level\":"
		out.RawString(prefix)
		out.Int32(int32(in.CityLevel))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VacancyEntity) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson163c17a9EncodeGithubComStafford1986TestManticoreUsecaseEntity(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VacancyEntity) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson163c17a9EncodeGithubComStafford1986TestManticoreUsecaseEntity(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VacancyEntity) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson163c17a9DecodeGithubComStafford1986TestManticoreUsecaseEntity(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VacancyEntity) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson163c17a9DecodeGithubComStafford1986TestManticoreUsecaseEntity(l, v)
}
func easyjson163c17a9DecodeGithubComStafford1986TestManticoreUsecaseEntity1(in *jlexer.Lexer, out *Vacancies) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(Vacancies, 0, 8)
			} else {
				*out = Vacancies{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 *VacancyEntity
			if in.IsNull() {
				in.Skip()
				v1 = nil
			} else {
				if v1 == nil {
					v1 = new(VacancyEntity)
				}
				(*v1).UnmarshalEasyJSON(in)
			}
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson163c17a9EncodeGithubComStafford1986TestManticoreUsecaseEntity1(out *jwriter.Writer, in Vacancies) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			if v3 == nil {
				out.RawString("null")
			} else {
				(*v3).MarshalEasyJSON(out)
			}
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v Vacancies) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson163c17a9EncodeGithubComStafford1986TestManticoreUsecaseEntity1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Vacancies) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson163c17a9EncodeGithubComStafford1986TestManticoreUsecaseEntity1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Vacancies) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson163c17a9DecodeGithubComStafford1986TestManticoreUsecaseEntity1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Vacancies) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson163c17a9DecodeGithubComStafford1986TestManticoreUsecaseEntity1(l, v)
}
func easyjson163c17a9DecodeGithubComStafford1986TestManticoreUsecaseEntity2(in *jlexer.Lexer, out *SortParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "field":
			out.Field = string(in.String())
		case "order":
			out.Order = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson163c17a9EncodeGithubComStafford1986TestManticoreUsecaseEntity2(out *jwriter.Writer, in SortParams) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"field\":"
		out.RawString(prefix[1:])
		out.String(string(in.Field))
	}
	{
		const prefix string = ",\"order\":"
		out.RawString(prefix)
		out.String(string(in.Order))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SortParams) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson163c17a9EncodeGithubComStafford1986TestManticoreUsecaseEntity2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SortParams) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson163c17a9EncodeGithubComStafford1986TestManticoreUsecaseEntity2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SortParams) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson163c17a9DecodeGithubComStafford1986TestManticoreUsecaseEntity2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SortParams) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson163c17a9DecodeGithubComStafford1986TestManticoreUsecaseEntity2(l, v)
}
func easyjson163c17a9DecodeGithubComStafford1986TestManticoreUsecaseEntity3(in *jlexer.Lexer, out *SearchRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "query":
			out.Query = string(in.String())
		case "is_active":
			out.IsActive = bool(in.Bool())
		case "city_id":
			out.CityId = int32(in.Int32())
		case "sort_params":
			if in.IsNull() {
				in.Skip()
				out.SortParams = nil
			} else {
				if out.SortParams == nil {
					out.SortParams = new(SortParams)
				}
				(*out.SortParams).UnmarshalEasyJSON(in)
			}
		case "filter_params":
			if in.IsNull() {
				in.Skip()
				out.FilterParams = nil
			} else {
				if out.FilterParams == nil {
					out.FilterParams = new(FilterParams)
				}
				(*out.FilterParams).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson163c17a9EncodeGithubComStafford1986TestManticoreUsecaseEntity3(out *jwriter.Writer, in SearchRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"query\":"
		out.RawString(prefix[1:])
		out.String(string(in.Query))
	}
	{
		const prefix string = ",\"is_active\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsActive))
	}
	{
		const prefix string = ",\"city_id\":"
		out.RawString(prefix)
		out.Int32(int32(in.CityId))
	}
	{
		const prefix string = ",\"sort_params\":"
		out.RawString(prefix)
		if in.SortParams == nil {
			out.RawString("null")
		} else {
			(*in.SortParams).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"filter_params\":"
		out.RawString(prefix)
		if in.FilterParams == nil {
			out.RawString("null")
		} else {
			(*in.FilterParams).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SearchRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson163c17a9EncodeGithubComStafford1986TestManticoreUsecaseEntity3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SearchRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson163c17a9EncodeGithubComStafford1986TestManticoreUsecaseEntity3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SearchRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson163c17a9DecodeGithubComStafford1986TestManticoreUsecaseEntity3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SearchRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson163c17a9DecodeGithubComStafford1986TestManticoreUsecaseEntity3(l, v)
}
func easyjson163c17a9DecodeGithubComStafford1986TestManticoreUsecaseEntity4(in *jlexer.Lexer, out *Resumes) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(Resumes, 0, 8)
			} else {
				*out = Resumes{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v4 *ResumeEntity
			if in.IsNull() {
				in.Skip()
				v4 = nil
			} else {
				if v4 == nil {
					v4 = new(ResumeEntity)
				}
				(*v4).UnmarshalEasyJSON(in)
			}
			*out = append(*out, v4)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson163c17a9EncodeGithubComStafford1986TestManticoreUsecaseEntity4(out *jwriter.Writer, in Resumes) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v5, v6 := range in {
			if v5 > 0 {
				out.RawByte(',')
			}
			if v6 == nil {
				out.RawString("null")
			} else {
				(*v6).MarshalEasyJSON(out)
			}
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v Resumes) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson163c17a9EncodeGithubComStafford1986TestManticoreUsecaseEntity4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Resumes) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson163c17a9EncodeGithubComStafford1986TestManticoreUsecaseEntity4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Resumes) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson163c17a9DecodeGithubComStafford1986TestManticoreUsecaseEntity4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Resumes) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson163c17a9DecodeGithubComStafford1986TestManticoreUsecaseEntity4(l, v)
}
func easyjson163c17a9DecodeGithubComStafford1986TestManticoreUsecaseEntity5(in *jlexer.Lexer, out *ResumeEntity) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		case "active":
			out.Active = int(in.Int())
		case "salary_min":
			out.SalaryMin = int32(in.Int32())
		case "salary_max":
			out.SalaryMax = int32(in.Int32())
		case "created_at":
			out.CreatedAT = int32(in.Int32())
		case "updated_at":
			out.UpdatedAt = int32(in.Int32())
		case "skills":
			out.Skills = string(in.String())
		case "city":
			out.City = int32(in.Int32())
		case "city_level":
			out.CityLevel = int32(in.Int32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson163c17a9EncodeGithubComStafford1986TestManticoreUsecaseEntity5(out *jwriter.Writer, in ResumeEntity) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.Id))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"active\":"
		out.RawString(prefix)
		out.Int(int(in.Active))
	}
	{
		const prefix string = ",\"salary_min\":"
		out.RawString(prefix)
		out.Int32(int32(in.SalaryMin))
	}
	{
		const prefix string = ",\"salary_max\":"
		out.RawString(prefix)
		out.Int32(int32(in.SalaryMax))
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Int32(int32(in.CreatedAT))
	}
	{
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.Int32(int32(in.UpdatedAt))
	}
	{
		const prefix string = ",\"skills\":"
		out.RawString(prefix)
		out.String(string(in.Skills))
	}
	{
		const prefix string = ",\"city\":"
		out.RawString(prefix)
		out.Int32(int32(in.City))
	}
	{
		const prefix string = ",\"city_level\":"
		out.RawString(prefix)
		out.Int32(int32(in.CityLevel))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ResumeEntity) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson163c17a9EncodeGithubComStafford1986TestManticoreUsecaseEntity5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResumeEntity) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson163c17a9EncodeGithubComStafford1986TestManticoreUsecaseEntity5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResumeEntity) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson163c17a9DecodeGithubComStafford1986TestManticoreUsecaseEntity5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResumeEntity) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson163c17a9DecodeGithubComStafford1986TestManticoreUsecaseEntity5(l, v)
}
func easyjson163c17a9DecodeGithubComStafford1986TestManticoreUsecaseEntity6(in *jlexer.Lexer, out *FilterParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "field":
			out.Field = string(in.String())
		case "order":
			out.Order = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson163c17a9EncodeGithubComStafford1986TestManticoreUsecaseEntity6(out *jwriter.Writer, in FilterParams) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"field\":"
		out.RawString(prefix[1:])
		out.String(string(in.Field))
	}
	{
		const prefix string = ",\"order\":"
		out.RawString(prefix)
		out.String(string(in.Order))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FilterParams) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson163c17a9EncodeGithubComStafford1986TestManticoreUsecaseEntity6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FilterParams) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson163c17a9EncodeGithubComStafford1986TestManticoreUsecaseEntity6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FilterParams) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson163c17a9DecodeGithubComStafford1986TestManticoreUsecaseEntity6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FilterParams) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson163c17a9DecodeGithubComStafford1986TestManticoreUsecaseEntity6(l, v)
}
